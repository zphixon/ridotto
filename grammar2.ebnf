(* each rule may be separated by whitespace *)

program = { item };

item = type | class | function;

type = 'type', upperIdent, ['[', typeArgs, ']'], typeInner;
typeArgs = typeExpr, {',', typeExpr};

typeInner = [
    ('=', typeExpr)
    | ('{',
        { typeAnnotated },
        { typeVariant },
        { function },
    '}')
];

typeVariant = upperIdent, typeInner;

class = 'class', upperIdent, ['{', { maybeAbstractFunction }, '}'];
maybeAbstractFunction = function | functionHead ;

functionHead =
    {'export' | 'const' | 'async' | 'builtin'}, 'fn',
    lowerIdent, [typeArgs], '(', [annotatedArgs], ')',
    ['->', typeExpr];

annotatedArgs = typeAnnotated, {',', typeAnnotated};

function = functionHead, '{', {stmt}, '}';

typeAnnotated = lowerIdent, ':', typeExpr;

typeExpr = typeName, ['[', typeArgs, ']'];
typeName = (upperIdent, {'.', upperIdent}) | lowerIdent;