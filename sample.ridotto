// a value is an instance of an element of a set. that set is the type.
// the type should describe valid elements of that set.

// declare a set, named Unit, with a single element, named Unit
type Unit

// delcare a set named Bit, with some elements Zero and One
type Bit {
    Zero
    One
}

// elements of a set may have properties
type Nibble {
    bita: Bit
    bitb: Bit
    bitc: Bit
    bitd: Bit
}

// elements of a set may themselves be sets
type Shape {
    Oval {
        eccentricity: Int
        Oval { minor_radius: Int }
        Circle { radius: Int }
    }

    Quadrilateral {
        sidea: Int
        sideb: Int
        sidec: Int
        sided: Int

        Rectangle {
            Rectangle
            Square
        }

        Rhombus {
            slant: Int
            RectangleRhombus
            SquareRhombus
        }
    }
}

type Applique {
    shape: Shape
    point: Point[Int]
}

type Point[Math[n]] {
    x: n
    y: n

    Metric
    Customary

    func distance(a: Point, b: Point) -> Option[n] {
        match (a, b) {
            (Metric, Metric) | (Customary, Customary) =>
                Option.Some { value: Math.sqrt(Math.powi(b.x - a.x, 2) + Math.powi(b.y - a.y, 2)) }
            _ => Option.None
        }
    }
}

type Option[t] {
    Some(t)
    None

    func unwrap(self: Self) -> t {
        match self {
            Option.Some(value) => value,
            Option.None => panic("called unwrap on None value")
        }
    }
}

class Monad[a, b] {
    func wrap(a: a) -> Monad[a]
    func map(m: Monad[a], f: func(a) -> Monad[b]) -> Monad[b]
}

impl Monad[a, b] for Option[a] {
    func wrap(value: a) -> Option[a] {
        Option.Some(value)
    }

    func map(self: Option[a], f: func(a) -> Option[b]) -> Option[b] {
        match self {
            Option.Some(value) => f(value)
            Option.None => Option.None
        }
    }
}

type Result[t, e] {
    Ok(t)
    Err(e)
}

impl Monad[a, b] for Result[a, e] {
    func wrap(value: a) -> Result[a, e] {
        Result.Ok(value)
    }

    func map(self: Result[a, e], f: func(a) -> Result[b, e]) -> Result[b, e] {
        match self {
            Result.Ok(value) => f(value)
            Result.Err(err) => Result.Err(err)
        }
    }
}

class Iterator[t] {
    func next(self: Iterator[t]) -> Option[t]

    func map(self: Iterator[t], xform: func(t) -> u) -> Map[t, u] {
        Map {
            iter: self
            xform
        }
    }
}

type Map[t, u] {
    iter: Iterator[t]
    xform: func(t) -> u
}

impl Iterator[u] for Map[t, u] {
    func next(self: Map[t, u]) -> Option[u] {
        match self.iter.next() {
            Some(some) => Some((self.xform)(some))
            None => None
        }
    }
}

func lol(a: (A, B, C)) -> (C, B, A) {
    (a.3, a.2, a.1)
}

//func parse_primary(scanner: &Scanner, depth: Usize) -> Result[Expr, Error] {
//    let type_ = scanner.peek_token().type_
//    match type_ {
//        TokenType.LowerIdent => Ok(Expr.Variable {
//            variable: consume_lower(scanner, depth),
//        })
//
//        TokenType.UpperIdent => Ok(Expr.TypeName {
//            type_: consume_upper(scanner, depth),
//        }),
//
//        TokenType.Int(_)
//        | TokenType.Float(_)
//        | TokenType.True
//        | TokenType.False
//        | TokenType.String => Ok(Expr.Literal {
//            literal: consume(scanner, type_, depth),
//        }),
//
//        TokenType.LeftBrace => {
//            let stmts = parse_brace_delimited_stmts(scanner, depth)
//            Ok(Expr.Block { stmts })
//        }
//
//        TokenType.LeftParen => {
//            let mut values = comma_delimited(
//                scanner,
//                depth,
//                TokenType.LeftParen,
//                TokenType.RightParen,
//                parse_expr,
//            )
//            if values.len() == 1 {
//                Ok(Expr.Paren {
//                    expr: Box.new(values.pop().unwrap()),
//                })
//            } else {
//                Ok(Expr.Tuple { values })
//            }
//        }
//
//        _ => Err(RidottoError.expected_expression(scanner.peek_token())),
//    }
//}
//