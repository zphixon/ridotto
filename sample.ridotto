// a value is an instance of an element of a set. that set is the type.
// the type should describe valid elements of that set.

// declare a set, named Unit, with a single element, named Unit
type Unit

// delcare a set named Bit, with some elements Zero and One
type Bit {
    Zero
    One
}

// elements of a set may have properties
type Nibble {
    bita: Bit
    bitb: Bit
    bitc: Bit
    bitd: Bit
}

// elements of a set may themselves be sets
type Shape {
    Oval {
        eccentricity: Int
        Oval { minor_radius: Int }
        Circle { radius: Int }
    }

    Quadrilateral {
        sidea: Int
        sideb: Int
        sidec: Int
        sided: Int

        Rectangle {
            Rectangle
            Square
        }

        Rhombus {
            slant: Int
            RectangleRhombus
            SquareRhombus
        }
    }
}

type Applique {
    shape: Shape
    point: Point[Int]
}

type Point[Math[n]] {
    x: n
    y: n

    Metric
    Customary

    fn distance(a: Point, b: Point) -> Option[n] {}
}

type Option[t] {
    Some { value: t }
    None

    fn unwrap(self: Self) -> t {
        match self {
            Option.Some { value } => value,
            Option.None => panic("called unwrap on None value")
        }
    }
}

class Monad[a, b] {
    fn wrap(a: a) -> Monad[a]
    fn map(m: Monad[a], f: fn(a) -> Monad[b]) -> Monad[b]
}

//impl Monad[a, b] for Option[a] {
//    fn wrap(value: a) -> Option[a] {
//        Option.Some { value }
//    }
//
//    fn map(self: Option[a], f: fn(a) -> Option[b]) -> Option[b] {
//        match self {
//            Option.Some { value } => f(value)
//            Option.None => Option.None
//        }
//    }
//}
//
//impl Monad[a, b] for Result[a, e] {
//    fn wrap(value: a) -> Result[a, e] {
//        Result.Ok { value }
//    }
//
//    fn map(self: Result[a, e], f: fn(a) -> Result[b, e]) -> Result[b, e] {
//        match self {
//            Result.Ok { value } => f(value)
//            Result.Err { err } => Result.Err { err }
//        }
//    }
//}
//
//class Iterator[t] {
//    fn next(self: Iterator[t]) -> Option[t]
//
//    fn map(self: Iterator[t], xform: fn(t) -> u) -> Map[t, u] {
//        Map {
//            iter: self
//            xform
//        }
//    }
//}
//
//type Map[t, u] {
//    iter: Iterator[t]
//    xform: fn(t) -> u
//}
//
//impl Iterator[u] for Map[t, u] {
//    fn next(self: Map[t, u]) -> Option[u] {
//        match self.iter.next() {
//            Some { some } => Some { (self.xform)(some) }
//            None => None
//        }
//    }
//}
